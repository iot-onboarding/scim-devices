---
title: Device Schema Extensions to the SCIM model
abbrev: SCIM Device Schema Extensions
docname: draft-shahzad-scim-device-model-02
submissionType: IETF
category: std

ipr: trust200902
keyword: Internet-Draft

stand_alone: yes
pi: [toc, sortrefs, symrefs]

author:
 -  ins: M. Shahzad
    name: Muhammad Shahzad
    org: North Carolina State University
    street:
    - Department of Computer Science
    - 890 Oval Drive
    - Campus Box 8206
    city: Raleigh, NC
    code: 27695-8206
    country: USA
    email: mshahza@ncsu.edu
 -
    ins: H. Iqbal
    name: Hassan Iqbal
    org: North Carolina State University
    street:
    - Department of Computer Science
    - 890 Oval Drive
    - Campus Box 8206
    city: Raleigh, NC
    code: 27695-8206
    country: USA
    email: hiqbal@ncsu.edu
 -
    ins: E. Lear
    name: Eliot Lear
    org: Cisco Systems
    street: Richtistrasse 7
    code: CH-8304
    city: Wallisellen
    country: Switzerland
    phone: +41 44 878 9200
    email: lear@cisco.com

normative:
  BLE53:
    title: Bluetooth Core Specification, Version 5.3
    author:
      -
        org: Bluetooth SIG
    date: 2021

  DPP2:
    title: Wi-Fi Easy Connect Specification, Version 2.0
    author:
      -
        org: Wi-Fi Alliance
    date: 2020

--- abstract

The initial core schema for SCIM (System for Cross Identity
Management) was designed for provisioning users.  This memo specifies
schema extensions that enables provisioning of devices, using various
underlying bootstrapping systems, such as Wifi EasyConnect, RFC 8366
vouchers, and BLE passcodes.

--- middle

Introduction
============

The Internet of Things presents a management challenge in many
dimensions.  One of them is the ability to onboard and manage large
number of devices.  There are many models for bootstrapping trust
between devices and network deployments.  Indeed it is expected that
different manufacturers will make use of different methods.

SCIM (System for Cross Identity Management) {{!RFC7643}} {{!RFC7644}}
defines a protocol and a schema for provisioning of users.  However,
it can easily be extended to provision devices.  The protocol and core
schema were designed to permit just such extensions.  Bulk operations
are supported.  This is good because often devices are procured in
bulk.

Why SCIM for devices?
---------------------
Some might ask why SCIM is well suited for this purpose and not, for
example, NETCONF or RESTCONF with YANG.  After all, there are all sorts
of existing models available.  The answer is that the only information
being passed about the device is neither state nor device configuration
information, but only information necessary to bootstrap trust so that
the device may establish connectivity.


Protocol Participants
---------------------

In the normal SCIM model, it was presumed that large federated
deployments would be SCIM clients who provision and remove employees
and contractors as they are enter and depart those deployments, and
federated services such as sales, payment, or conferencing services
would be the servers.

In the device model, the roles are reversed, and may be somewhat more
varied.  A deployment network management system gateway (NMS gateway)
plays the role of the server, receiving information about devices that
are expected to be connected to its network.  That server will apply
appropriate local policies regarding whether/how the device should be
connected.

The client may be one of a number of entities:

 - A vendor who is authorized to add devices to a network as part of
   a sales transaction.  This is similar to the sales integration
   sometimes envisioned by Bootstrapping Remote Key Infrastructure
   (BRSKI) {{?RFC8995}}.

 - A client application that administrators or employees use to add,
   remove, or get information about devices.  An example might be an
   tablet or phone app that scans Easyconnect QR codes.

~~~~~


                            +-----------------------------------+
                            |                                   |
    +-----------+   Request |  +---------+                      |
    | onboarding|------------->|  SCIM   |                      |
    |    app    |<-------------| Server  |                      |
    +-----------+  Ctrl Endpt  +---------+                      |
                            |                                   |
    +-----------+           |  +------------+         +-------+ |
    |  Control  |...........|..|    ALG     |.........|device | |
    |    App    |           |  +------------+         +-------+ |
    +-----------+           |                                   |
                            |                                   |
                            +-----------------------------------+

~~~~~
{: #arch title="Basic Architecture"}

In {{arch}}, the onboarding app provides the device particulars.  As
part of the response, the SCIM server might provide additional
information, especially in the case of non-IP devices, where an
application-layer gateway may need to be used to communicate with
the device.  The control endpoint is one among a number of objects
that may be returned.

Schema Description
------------------

RFC 7643 does not prescribe a language to describe a schema. We
have chosen the JSON schema language {{!I-D.bhutton-json-schema}} for
this purpose.  This implies that use of XML for this device extension
is not supported.

Several additional schemas specify specific onboarding mechanisms,
such as BLE and Wifi Easy Connect.

## Schema Representation

Attributes defined in the device core schema and extensions comprise
characteristics and SCIM datatypes defined in Sections 2.2 and 2.3 of
the {{!RFC7643}}. This RFC does not define new characteristics and
datatypes for the SCIM attributes.

Terminology
-----------
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCP 14 {{!RFC2119}} {{!RFC8174}} when, and only when, they
appear in all capitals, as shown here.

## Device Grouping

Device grouping occurs using the core SCIM group object, as defined in
{{!RFC7643}} Section 4.2.

ResourceType Device
====================
This section defines a new resource type, 'Device'. The "ResourceType" schema specifies the metadata about a resource type (see section 6 of {{!RFC7643}}). The resource "Devices" comprises a core device schema and several extension schemas. The core schema provides a minimal resource representation, whereas extension schemas extend the core schema depending on the device's capability.

~~~~~~~~~
<CODE BEGINS>
{::include SCIM_resource_type.json}
<CODE ENDS>
~~~~~~~~~



# SCIM Core Device Schema

The core device schema provides the minimal representation of a
resource "Device". It contains only those attributes that any device
may need. Not all attributes are optional.  The core schema for
"Device" is identified using the schema URI:
"urn:ietf:params:scim:schemas:core:2.0:Device". The following
attributes are defined in the device core schema, and details of their
characteristics are presented in
[](#device-schema-json-representation).

## Common Attributes

The Device schema contains three common attributes as defined in the
{{!RFC7643}}.

id

An id is a required and unique attribute of the device core schema
(see section 3.1 of {{!RFC7643}}).

externalID

An externalID is an optional attribute (see section 3.1 of {{!RFC7643}}).

meta

Meta is a complex attribute and is required (see section 3.1 of {{!RFC7643}}).



## Singular Attributes

deviceDisplayName

This is a human-readable device name suitable for displaying to
end-users.  It is a mutable, non-unique, and not required string
value.  For example, "BLE Heart Monitor".

adminState

This is a required mutable boolean value indicating the device's
administrative status. If this variable is set to True, then the
device is expected to be accessible.  Note that the SCIM server
may apply whatever policy it may to establish and control this state.

mudUrl

A URL to the MUD file of the device.  When present, the mudUrl may be
associated with this device, and used as described in {{!RFC8520}}.

## Device Schema JSON Representation

Following is the JSON representation of the Device core schema. Common
attributes such as "id" and "externalID" are not presented below.

~~~~~~~~~
<CODE BEGINS>
{::include SCIM_device_core_schema_representation.json}
<CODE ENDS>
~~~~~~~~~


## Device Object Example

Following is the minimal example of a device object that does not
contain any extension representing the device's communication
capability.

~~~~~~~~~
<CODE BEGINS>
{::include examples/SCIM_device_core_schema_object.json}
<CODE ENDS>
~~~~~~~~~


# SCIM Device Extensions

This section presents various extension schemas, their attributes,
JSON representation, and example object. These schemas extend the core
device schema based on the device's capability (communication stack).
This RFC presents an additional hierarchical level by introducing
extensions within an extension.  See below for more details.

\[\[ DISCUSS: Is this okay with the working group? \]\]


## BLE Extension

This schema extends the device schema to represent the devices
supporting BLE. The attributes are as follows:

### Singular Attributes

deviceMacAddress

this is the public MAC address assigned by the manufacturer. It is a
unique 48-bit value. The regex pattern is the following:

~~~~~~
^[0-9A-Fa-f]{2}(:[0-9A-Fa-f]{2}){5}
~~~~~~

addressType

This flag is taken from the BLE core specification, 5.3. If FALSE, the
device is using a public MAC address. If TRUE, the device uses a
Random address resolved using IRK.

irk

Identity resolving key, which is unique for every device. It is used
to resolve the random address.

### Multivalued Attributes

versionSupport

This field provides an array of all the BLE versions supported by the
device. For example, \[4.1, 4.2, 5.0, 5.1, 5.2, 5.3\].

pairingMethods

This attribute is the array of pairing methods associated with the BLE
device. The pairing methods may require sub-attributes, such as
key/password, for the device pairing process. To enable the
scalability of pairing methods in the future, they are represented as
extensions to incorporate various attributes that are part of the
respective pairing process. Pairing method extensions are nested
inside the BLE extension.

### BLE Pairing Method Extensions

The details on pairing methods and their associated attributes are in
section 2.3 of {{BLE53}}.  This memo defines extensions for four
pairing methods that are nested insided the BLE extension schema. They
are as follows.

urn:ietf:params:scim:schemas:extension:pairingNull:2.0:Device

This extension does not have any attribute. It allows pairing for BLE
devices that do not require a pairing method.

urn:ietf:params:scim:schemas:extension:pairingJustWorks:2.0:Device

Just works pairing method does not require a key to pair devices. For
completeness, the key value is set to 'null'.

urn:ietf:params:scim:schemas:extension:pairingPassKey:2.0:Device

The pass key pairing method requires a 6-digit key to pair devices.
This extension has one singular attribute, "key".  The key pattern is
as follows:

~~~~~
^[0-9]{6}$
~~~~~

urn:ietf:params:scim:schemas:extension:pairingOOB:2.0:Device

The out-of-band pairing method includes three singular attributes,
i.e., key, randomNumber, and confirmationNumber. The key value is
required and received from out-of-bond sources such as NFC.
randomNumber is also a required attribute which is nounce added to the
key.  confirmationNumber is a non-required attribute, which some
solutions require in RESTful message exchange.



### BLE Extension JSON Representation

~~~~~~~~
<CODE BEGINS>
{::include extensions/SCIM_BLE_extension_schema.json}
<CODE ENDS>
~~~~~~~~

### BLE Device Object Example

~~~~~~~~
<CODE BEGINS>
{::include examples/SCIM_device_ble_object.json}
<CODE ENDS>
~~~~~~~~

## DPP EasyConnect Extension


This schema extends the device schema to enable WiFi EasyConnect
(otherwise known as Device Provisioning Protocol).  The attributes in
this extension are adopted from {{DPP2}}. The attributes are as follows:


### Singular Attributes

dppVersion
This attribute represents the version of DPP the device supports.

bootstrapKey

This key is Elliptic-Curve Diffie–Hellman (ECDH) public key. The
base64 encoded lengths for P-256, P-384, and P-521 are 80, 96, and 120
characters.

deviceMacAddress

The manufacturer assigns the MAC address. It is a unique 48-bit value. The regex pattern is as follows:

~~~~~
^[0-9A-Fa-f]{2}(:[0-9A-Fa-f]{2}){5}.
~~~~~

serialNumber

An alphanumeric serial number may also be passed as bootstrapping information.


### Multivalued Attributes

bootstrappingMethod

It is the array of all the bootstrapping methods available on the
enrollee device. For example, \[QR, NFC\].

classChannel

This attribute is an array of global operating class and channel
shared as bootstrapping information. It is formatted as
class/channel. For example, \['81/1','115/36'\].

### DPP Extension JSON Representation

~~~~~~~
<CODE BEGINS>
{::include extensions/SCIM_DPP_extension_schema.json}
<CODE ENDS>
~~~~~~~


### DPP Device Object Example

~~~~~~~~
<CODE BEGINS>
{::include examples/SCIM_device_dpp_object.json}
<CODE ENDS>
~~~~~~~~


## Zigbee Extension


This schema extends the device schema to enable the provisioning of Zigbee devices. It has one singular attribute and one multivalued attribute. The attributes are as follows:


### Singular Attribute

deviceEui64Address

this attribute is an EUI-64 (Extended Unique Identifier) device
address. The regex pattern is as follows:

~~~~~
^[0-9A-Fa-f]{16}$
~~~~~

### Multivalued Attribute

versionSupport

This attribute provides an array of all the Zigbee versions supported by the
device. For example, \[3.0\].


### Zigbee Extension JSON Representation

~~~~~~~~
<CODE BEGINS>
{::include extensions/SCIM_zigbee_extension_schema.json}
<CODE ENDS>
~~~~~~~~


### Zigbee Device Object Example

~~~~~~~~
<CODE BEGINS>
{::include examples/SCIM_device_zigbee_object.json}
<CODE ENDS>
~~~~~~~~


## The Endpoint Applications Extension Schema

Sometimes non-IP devices such as those using BLE or Zigbe require an
application gateway interface to manage them. SCIM clients MUST NOT
specify this to describe native IP-based devices.

The device schema is a base schema upon which specific onboarding
technology schemas are built. This extension provides two complex
attributes deviceControl, and dataReceiver to represent
two types of partner endpoint applications, device
control, and data receiver applications, respectively. These complex
attributes and their respective sub-attributes are as follows:


### "deviceControl" Complex Attribute

This complex attribute represents the application responsible for
controlling the device. Device control applications provide access
control for the device. It determines which other applications can
access the data from the device. Depending on the use case, there can
be more than one device control application.

"deviceControl" has two attributes: i) a multvalued client-tokens
attribute" and ii) a singular attribute called
"enterpriseEndpoint". Their details are as follows:

client-tokens

This attribute contains a list of tokens that the client will used to
authenticate itself.  Each token may be a string up to 500 characters
in length.

\[\[ We probably need something better here. \]\]


enterpriseEndpoint

Device control apps use the URL of the enterprise endpoint to reach
the network gateway. When the enterprise receives the SCIM object from
the onboarding app, it adds this attribute to it and sends it back as
a response to the onboarding app.


### "dataReceiver" Complex Attribute

This complex attribute represents the application that receives data
from the device. Depending on the use case, there can be more than one
data receiver application.

"dataReceiver" has two attributes:

1. a multi-valued attribute called "client-tokens".

2. a singular attribute called "enterpriseEndpoint".

The complex attribute "apps" provides the URLs and root certificates of the
respective data receiver applications in an array. Their details are
as follows:

client-tokens


This attribute contains a list of tokens that the client will used to
authenticate itself.  Each token may be a string up to 500 characters
in length.

\[\[ We probably need something better here. \]\]

enterpriseEndpoint

Data receiver apps use the URL of the enterprise endpoint to reach the
network gateway. When the enterprise receives the SCIM object from the
onboarding app, it adds this attribute to it and sends it back as a
response to the onboarding app.


### Endpoint Extension JSON Representation

~~~~~~~~~
<CODE BEGINS>
{::include extensions/SCIM_endpoint_extension_schema.json}}
<CODE ENDS>
~~~~~~~~~

### Endpoints Device Object Example
This example object below presents a BLE device along with the application endpoints.

~~~~~~~~~
<CODE BEGINS>
{::include examples/SCIM_device_endpoints_with_ble_object.json}}
<CODE ENDS>
~~~~~~~~~


Security Considerations
=======================

Because provisioning operations are senstive, each client must be
appropriately authenticated.  Certain objects may be read-only or
not visible based on who is connected.

\[ More to be added here. \]

IANA Considerations
===================

TBD

Changes from Earlier Versions
=============================

Draft -01:

  *  Doh! We forgot the core device schemea!

Draft -00:

  * Initial revision
